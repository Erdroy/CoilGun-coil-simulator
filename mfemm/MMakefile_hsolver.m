function [rules,vars] = MMakefile_hsolver (varargin)

%     mfemmdeps.getmfilepath (mfilename);

%     if ispc
%         trilibraryflag = '-DCPU86';
%     else
%         trilibraryflag = '-DLINUX';
%     end

    % flags that will be passed direct to mex
%     vars.MEXFLAGS = ['${MEXFLAGS} -I"../cfemm/hsolver" -I"../cfemm/libfemm" -I"../cfemm/libfemm/liblua" ', trilibraryflag];
    vars.MEXFLAGS = '${MEXFLAGS} -I"../cfemm/hsolver" -I"../cfemm/libfemm" -I"../cfemm/libfemm/liblua" ';
    if isunix && ~mfemmdeps.isoctave ()
        vars.OPTIMFLAGS = ['-O2'];
        vars.MEXFLAGS = [vars.MEXFLAGS, ' CXXOPTIMFLAGS="-O2 -DNDEBUG"'];
    end
    
    vars.CXXFLAGS = '${CXXFLAGS} -std=c++14';
    
    vars.LDFLAGS = '${LDFLAGS} -lstdc++';
    
    libluacomplex_sources = { ...
        'femmcomplex.cpp', ...
        'lapi.cpp', ...
        'lauxlib.cpp', ...
        'lbaselib.cpp', ...
        'lcode.cpp', ...
        'ldblib.cpp', ...
        'ldebug.cpp', ...
        'ldo.cpp', ...
        'lfunc.cpp', ...
        'lgc.cpp', ...
        'liolib.cpp', ...
        'llex.cpp', ...
        'lmathlib.cpp', ...
        'lmem.cpp', ...
        'lobject.cpp', ...
        'lparser.cpp', ...
        'lstate.cpp', ...
        'lstring.cpp', ...
        'lstrlib.cpp', ...
        'ltable.cpp', ...
        'ltests.cpp', ...
        'ltm.cpp', ...
        'lundump.cpp', ...
        'lvm.cpp', ...
        'lzio.cpp', ...
        };
    
    libluacomplex_headers = { ...
    	'llimits.h', ...
    	'lopcodes.h', ...
    	'lua.h', ...
    	'luadebug.h', ...
    	'lualib.h', ...
        };
    
    libfemm_sources = { ...
        'femmconstants.cpp', ...
        'femmenums.cpp', ...
        'CArcSegment.cpp', ...
        'CBlockLabel.cpp', ...
        'CBoundaryProp.cpp', ...
        'CCircuit.cpp', ...
        'CCommonPoint.cpp', ...
        'CElement.cpp', ...
        'CMaterialProp.cpp', ...
        'CMeshNode.cpp', ...
        'CNode.cpp', ...
        'CPointProp.cpp', ...
        'CSegment.cpp', ...
        'cspars.cpp', ...
        'cuthill.cpp', ...
        'feasolver.cpp', ...
        'FemmProblem.cpp', ...
        'FemmReader.cpp', ...
        'FemmStateBase.cpp', ...
        'femmversion.cpp', ...
        'fparse.cpp', ...
        'fullmatrix.cpp', ...
        'IntPoint.cpp', ...
        'LuaInstance.cpp', ...
        'PostProcessor.cpp', ...
        'spars.cpp', ...
        'stringTools.cpp', ... 
        };
    
    hsolver_sources = { ...
        'hsolver.cpp', ...
    };

    [ libluacomplex_objs,  libluacomplex_rules ] = ... 
         mmake.sources2rules ( libluacomplex_sources, ...
                               'SourceDir', fullfile('..', 'cfemm', 'libfemm', 'liblua') );
                                            
    [ libfemm_objs, libfemm_rules ] = ...
         mmake.sources2rules ( libfemm_sources, ...
                               'SourceDir', fullfile('..', 'cfemm', 'libfemm') );
    
    [ hsolver_objs, hsolver_rules ] = ...
         mmake.sources2rules ( hsolver_sources, ...
                               'SourceDir', fullfile('..', 'cfemm', 'hsolver') );
                                      
    vars.OBJS = [ libluacomplex_objs, ...
                  libfemm_objs, ...
                  hsolver_objs, ...
                  {'mexhsolver.cpp'}, ...
                ];

%     vars.OBJS = { ...
% 
%       ... % mexfunction
%       'mexhsolver.cpp' };

    % mexfmesher.${MEX_EXT}: ${OBJS}
    %     mex $^ -output $@
    rules(1).target = {'mexhsolver.${MEX_EXT}'};
    rules(1).deps = vars.OBJS;
    rules(1).commands = 'mex ${MEXFLAGS} $^ dummy.cpp -output $@';
    
    rules = [ rules, libluacomplex_rules, libfemm_rules, hsolver_rules ];

    rules(end+1).target = 'tidy';
    rules(end).commands = {'try; delete(''../cfemm/libfemm/liblua/*.${OBJ_EXT}''); catch; end;', ...
                         'try; delete(''../cfemm/libfemm/*.${OBJ_EXT}''); catch; end;', ...
                         'try; delete(''../cfemm/hsolver/*.${OBJ_EXT}''); catch; end;', ...
                         'try; delete(''*.${OBJ_EXT}''); catch; end;'};
	tidyruleind = numel (rules);
    
    rules(end+1).target = 'clean';
    rules(end).commands = [ rules(tidyruleind).commands, ...
                         {'try; delete(''*.${MEX_EXT}''); catch; end;'}];

end
