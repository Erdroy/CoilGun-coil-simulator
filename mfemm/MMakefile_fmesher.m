function [rules,vars] = MMakefile_fmesher (varargin)

    options.DoCrossBuildWin64 = false;
    options.Verbose = false;
    options.Debug = false;
    
    options = mfemmdeps.parse_pv_pairs (options, varargin);

    if isunix || mfemmdeps.isoctave
        ismscompiler = false;
    else
        cc = mex.getCompilerConfigurations ('C');
        if strncmpi (cc.Manufacturer, 'Microsoft', 9)
            ismscompiler = true;
        else
            ismscompiler = false;
        end
    end
    
    thisfilepath = mfemmdeps.getmfilepath (mfilename);
    
    thisfilepath = strrep (thisfilepath, '\', '/');

    if ispc || options.DoCrossBuildWin64
        trilibraryflag = '-DCPU86';
    else
        trilibraryflag = '-DLINUX';
    end
    
    vars.LDFLAGS = '${LDFLAGS} -lstdc++';

    % flags that will be passed direct to mex
    vars.MEXFLAGS = ['${MEXFLAGS} -I"../cfemm/fmesher" -I"../cfemm/fmesher/triangle" -I"../cfemm/libfemm" -I"../cfemm/libfemm/liblua" ', trilibraryflag];
    
    if options.Verbose
        vars.MEXFLAGS = [vars.MEXFLAGS, ' -v'];
    end
    
    if isunix && ~mfemmdeps.isoctave ()
        if options.Debug
            vars.OPTIMFLAGS = '-OO';
            vars.MEXFLAGS = [vars.MEXFLAGS, ' CXXOPTIMFLAGS="-O0 -DDEBUG"'];
        else
            vars.OPTIMFLAGS = '-O2';
            vars.MEXFLAGS = [vars.MEXFLAGS, ' CXXOPTIMFLAGS="-O2 -DNDEBUG"'];
        end
    end
    
    vars.CXXFLAGS = '${CXXFLAGS} -std=c++14';
    
    if ~ismscompiler
        vars.CXXFLAGS = [vars.CXXFLAGS, ' -fpermissive'];
        vars.CFLAGS = '${CFLAGS} -fpermissive';
    end
%     vars.
    
    cfemmpath = fullfile (thisfilepath, '..', 'cfemm');
    fmesherpath = fullfile (cfemmpath, 'fmesher'); 
    trianglepath = fullfile (fmesherpath, 'triangle'); 
    libfemmpath = fullfile (cfemmpath, 'libfemm');
    libluacomplexpath = fullfile (libfemmpath, 'liblua');
    
    libluacomplex_sources = { ...
        'femmcomplex.cpp', ...
        'lapi.cpp', ...
        'lauxlib.cpp', ...
        'lbaselib.cpp', ...
        'lcode.cpp', ...
        'ldblib.cpp', ...
        'ldebug.cpp', ...
        'ldo.cpp', ...
        'lfunc.cpp', ...
        'lgc.cpp', ...
        'liolib.cpp', ...
        'llex.cpp', ...
        'lmathlib.cpp', ...
        'lmem.cpp', ...
        'lobject.cpp', ...
        'lparser.cpp', ...
        'lstate.cpp', ...
        'lstring.cpp', ...
        'lstrlib.cpp', ...
        'ltable.cpp', ...
        'ltests.cpp', ...
        'ltm.cpp', ...
        'lundump.cpp', ...
        'lvm.cpp', ...
        'lzio.cpp', ...
        };
    
    libluacomplex_headers = { ...
    	'llimits.h', ...
    	'lopcodes.h', ...
    	'lua.h', ...
    	'luadebug.h', ...
    	'lualib.h', ...
        };
    
    libfemm_sources = { ...
        'femmconstants.cpp', ...
        'femmenums.cpp', ...
        'CArcSegment.cpp', ...
        'CBlockLabel.cpp', ...
        'CBoundaryProp.cpp', ...
        'CCircuit.cpp', ...
        'CCommonPoint.cpp', ...
        'CElement.cpp', ...
        'CMaterialProp.cpp', ...
        'CMeshNode.cpp', ...
        'CNode.cpp', ...
        'CPointProp.cpp', ...
        'CSegment.cpp', ...
        'cspars.cpp', ...
        'cuthill.cpp', ...
        'feasolver.cpp', ...
        'FemmProblem.cpp', ...
        'FemmReader.cpp', ...
        'FemmStateBase.cpp', ...
        'femmversion.cpp', ...
        'fparse.cpp', ...
        'fullmatrix.cpp', ...
        'IntPoint.cpp', ...
        'LuaInstance.cpp', ...
        'PostProcessor.cpp', ...
        'spars.cpp', ...
        'stringTools.cpp', ... 
        };

    fmesher_sources = { ...
        'fmesher.cpp', ...
        'main.cpp', ...
        'nosebl.cpp', ...
        'writepoly.cpp', ...
    };

    triangle_sources = {'triangle.c'};

    [ libluacomplex_objs,  libluacomplex_rules ] = ... 
         mmake.sources2rules ( libluacomplex_sources, ...
                               'SourceDir', libluacomplexpath );
                                            
    [ libfemm_objs, libfemm_rules ] = ...
         mmake.sources2rules ( libfemm_sources, ...
                               'SourceDir', libfemmpath );
                           
    [ triangle_objs, triangle_rules ] = ...
         mmake.sources2rules ( triangle_sources, ...
                               'SourceDir', trianglepath );
                           
    [ fmesher_objs, fmesher_rules ] = ...
         mmake.sources2rules ( fmesher_sources, ...
                               'SourceDir', fmesherpath );
          
    vars.OBJS = [ libluacomplex_objs, ...
                  libfemm_objs, ...
                  triangle_objs, ...
                  fmesher_objs, ...
                  {'mexfmesher.cpp'}, ...
                ];

    % mexfmesher.${MEX_EXT}: ${OBJS}
    %     mex $^ -output $@
    rules(1).target = {'mexfmesher.${MEX_EXT}'};
    rules(1).deps = vars.OBJS;
    rules(1).commands = 'mex ${MEXFLAGS} $^ dummy.cpp -output $@';
    
    rules = [ rules, libluacomplex_rules, libfemm_rules, triangle_rules, fmesher_rules ];

    rules(end+1).target = 'tidy';
    rules(end).commands = { 'try; delete(''../cfemm/libfemm/liblua/*.${OBJ_EXT}''); catch; end;', ...
                            'try; delete(''../cfemm/libfemm/*.${OBJ_EXT}''); catch; end;', ...
                            'try; delete(''../cfemm/fmesher/*.${OBJ_EXT}''); catch; end;', ...
                            'try; delete(''*.${OBJ_EXT}''); catch; end;' };
    tidyruleind = numel (rules);
    
    rules(end+1).target = 'clean';
    rules(end).commands = [ rules(tidyruleind).commands, ...
                            {'try; delete(''*.${MEX_EXT}''); catch; end;'} ];
                     
    % mexfmesher.${MEX_EXT}: ${OBJS}
    %     mex $^ -output $@
%     rules(1).target = {'crossw64'};
%     rules(1).deps = vars.OBJS;
%     rules(1).commands = 'mex ${MEXFLAGS} $^ -output mexfmesher.mexw64';

end
